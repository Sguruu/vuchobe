package ru.vuchobe.model;import java.util.ArrayList;import java.util.Collections;import java.util.List;import ru.vuchobe.util.loaders.Loader;public class ResponsePageBody<Value> implements Loader.ResultClonable {    private long totalPages = 0;    private long totalElements = 0;    private boolean hasContent = false;    private boolean last = true;    private boolean hasNext = false;    private Sort sort = Sort.DEFAULT;    private List<Value> content = Collections.EMPTY_LIST;    public ResponsePageBody() { }    public ResponsePageBody(long totalPages, long totalElements, boolean hasContent, boolean last, boolean hasNext, Sort sort, List<Value> content) {        this.totalPages = totalPages;        this.totalElements = totalElements;        this.hasContent = hasContent;        this.last = last;        this.hasNext = hasNext;        this.sort = sort;        this.content = content;    }    public long getTotalPages() {        return totalPages;    }    public void setTotalPages(long totalPages) {        this.totalPages = totalPages;    }    public long getTotalElements() {        return totalElements;    }    public void setTotalElements(long totalElements) {        this.totalElements = totalElements;    }    public boolean isHasContent() {        return hasContent;    }    public void setHasContent(boolean hasContent) {        this.hasContent = hasContent;    }    public boolean isLast() {        return last;    }    public void setLast(boolean last) {        this.last = last;    }    public boolean isHasNext() {        return hasNext;    }    public void setHasNext(boolean hasNext) {        this.hasNext = hasNext;    }    public Sort getSort() {        return sort;    }    public void setSort(Sort sort) {        this.sort = sort;    }    public List<Value> getContent() {        return content;    }    public void setContent(List<Value> content) {        this.content = content;    }    @Override    public Object clone() {        ArrayList<Value> content = new ArrayList<>();        for(Value value : this.content){            content.add(Loader.ResultClonable.clone(value));        }        Sort sort = Loader.ResultClonable.clone(this.sort);        return new ResponsePageBody<Value>(totalPages, totalElements, hasContent, last, hasNext, sort, content);    }    public static class Sort implements Loader.ResultClonable {        private boolean sorted = false;        private boolean unsorted = true;        private List<String> fields = Collections.EMPTY_LIST;        public Sort() {        }        public Sort(boolean sorted, boolean unsorted, List<String> fields) {            this.sorted = sorted;            this.unsorted = unsorted;            this.fields = fields;        }        public boolean isSorted() {            return sorted;        }        public void setSorted(boolean sorted) {            this.sorted = sorted;        }        public boolean isUnsorted() {            return unsorted;        }        public void setUnsorted(boolean unsorted) {            this.unsorted = unsorted;        }        public List<String> getFields() {            return fields;        }        public void setFields(List<String> fields) {            this.fields = fields;        }        @Override        public Object clone() {            return new Sort(sorted, unsorted, new ArrayList<>(fields));        }        public static final Sort DEFAULT = new Sort(){            @Override            public void setSorted(boolean sorted) {                throw new UnsupportedOperationException("DEFAULT SORT unmodification");            }            @Override            public void setUnsorted(boolean unsorted) {                throw new UnsupportedOperationException("DEFAULT SORT unmodification");            }            @Override            public void setFields(List<String> fields) {                throw new UnsupportedOperationException("DEFAULT SORT unmodification");            }        };    }}