package ru.vuchobe.util.threadUtil;import android.content.Context;import android.os.Bundle;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;public class ThreadFragment extends Fragment implements ThreadLooperLocal {    private ThreadLooperGlobalImpl looperGlobal = new ThreadLooperGlobalImpl(this);    private ThreadLooperLocalImpl looperLocal = new ThreadLooperLocalImpl(this);    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        _init();    }    @Override    public void onResume() {        super.onResume();    }    @Override    public void onDestroy() {        super.onDestroy();        _deinit();    }    @Override    public void _init() {        looperGlobal._init();        looperLocal._init();    }    @Override    public void _deinit() {        looperGlobal._deinit();        looperLocal._deinit();    }    @Override    public @NonNull    ThreadTask asyncIOGlobal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperGlobal.asyncIOGlobal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public @NonNull    ThreadTask asyncMainGlobal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperGlobal.asyncMainGlobal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public @NonNull    ThreadTask asyncNetworkGlobal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperGlobal.asyncNetworkGlobal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public @NonNull    ThreadTask asyncMainLocal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperLocal.asyncMainLocal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public @NonNull    ThreadTask asyncIOLocal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperLocal.asyncIOLocal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public @NonNull    ThreadTask asyncNetworkLocal(ThreadService.Unique unique, int uniqueNum, int timeStart, int timeReplay, int count, @NonNull IThreadTask task) {        return this.looperLocal.asyncNetworkLocal(unique, uniqueNum, timeStart, timeReplay, count, task);    }    @Override    public boolean isWorks() {        return this.looperLocal.isWorks();    }    @Override    public @Nullable    Context getContext() {        return super.getContext();    }}